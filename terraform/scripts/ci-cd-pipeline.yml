name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy (dev, staging, prod)'
        required: true
        default: 'dev'
      action:
        description: 'A칞칚o a ser executada (plan, apply, destroy)'
        required: true
        default: 'plan'

env:
  TF_LOG: INFO

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    # Usar diferentes ambientes baseado no branch ou input manual
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/develop' && 'staging') || 'dev' }}
    
    # Definir permiss칫es
    permissions:
      contents: read
      pull-requests: write
    
    # Definir vari치veis de ambiente
    env:
      TF_ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/develop' && 'staging') || 'dev' }}
      TF_ACTION: ${{ github.event.inputs.action || 'plan' }}
    
    steps:
      # Checkout do c칩digo
      - name: Checkout
        uses: actions/checkout@v3
      
      # Configurar autentica칞칚o GCP
      - name: 'Autenticar no Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      
      # Configurar CLI do Google Cloud
      - name: 'Configurar Google Cloud CLI'
        uses: 'google-github-actions/setup-gcloud@v1'
      
      # Configurar Terraform
      - name: 'Configurar Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
      
      # Definir diret칩rio de trabalho
      - name: 'Definir diret칩rio de trabalho'
        run: echo "TERRAFORM_WORKING_DIR=terraform/environments/${TF_ENVIRONMENT}" >> $GITHUB_ENV
      
      # Inicializar Terraform
      - name: 'Terraform Init'
        run: |
          cd $TERRAFORM_WORKING_DIR
          terraform init
      
      # Validar configura칞칚o
      - name: 'Terraform Validate'
        run: |
          cd $TERRAFORM_WORKING_DIR
          terraform validate
      
      # Formatar c칩digo
      - name: 'Terraform Format'
        run: |
          cd $TERRAFORM_WORKING_DIR
          terraform fmt -check
      
      # Planejar mudan칞as
      - name: 'Terraform Plan'
        id: plan
        run: |
          cd $TERRAFORM_WORKING_DIR
          terraform plan -out=tfplan
        continue-on-error: true
      
      # Comentar no PR com o resultado do plano
      - name: 'Comentar no PR'
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan 游닇\`${{ steps.plan.outcome }}\`
            
            <details><summary>Mostrar detalhes</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Executado por: @${{ github.actor }}, Ambiente: ${{ env.TF_ENVIRONMENT }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      # Aplicar mudan칞as (apenas se for a칞칚o manual ou push para main/develop)
      - name: 'Terraform Apply'
        if: |
          (github.event_name == 'workflow_dispatch' && env.TF_ACTION == 'apply') ||
          (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'))
        run: |
          cd $TERRAFORM_WORKING_DIR
          terraform apply -auto-approve tfplan
      
      # Destruir infraestrutura (apenas se for a칞칚o manual)
      - name: 'Terraform Destroy'
        if: github.event_name == 'workflow_dispatch' && env.TF_ACTION == 'destroy'
        run: |
          cd $TERRAFORM_WORKING_DIR
          terraform destroy -auto-approve 