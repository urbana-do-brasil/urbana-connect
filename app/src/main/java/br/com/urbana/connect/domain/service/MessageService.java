package br.com.urbana.connect.domain.service;

import br.com.urbana.connect.application.config.ContextConfig;
import br.com.urbana.connect.domain.model.Conversation;
import br.com.urbana.connect.domain.enums.ConversationStatus;
import br.com.urbana.connect.domain.model.Customer;
import br.com.urbana.connect.domain.model.Message;
import br.com.urbana.connect.domain.enums.MessageDirection;
import br.com.urbana.connect.domain.enums.MessageStatus;
import br.com.urbana.connect.domain.enums.MessageType;
import br.com.urbana.connect.domain.port.input.ConversationManagementUseCase;
import br.com.urbana.connect.domain.port.input.CustomerManagementUseCase;
import br.com.urbana.connect.domain.port.input.MessageProcessingUseCase;
import br.com.urbana.connect.domain.port.output.GptServicePort;
import br.com.urbana.connect.domain.port.output.MessageRepository;
import br.com.urbana.connect.domain.port.output.WhatsappServicePort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.slf4j.MDC;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Optional;
import java.util.Arrays;

/**
 * Implementa√ß√£o do caso de uso de processamento de mensagens.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class MessageService implements MessageProcessingUseCase {
    
    private final MessageRepository messageRepository;
    private final CustomerManagementUseCase customerService;
    private final ConversationManagementUseCase conversationService;
    private final GptServicePort gptService;
    private final WhatsappServicePort whatsappService;
    private final ConversationContextService contextService;
    private final PromptBuilderService promptBuilderService;
    private final ContextConfig contextConfig;
    
    private static final String SYSTEM_PROMPT = "Voc√™ √© Urba üòâ, assistente virtual da Urbana do Brasil, " +
            "uma empresa de Arquitetura e Decora√ß√£o. Seja amig√°vel, entusiasmada, " +
            "use emojis frequentemente e forne√ßa informa√ß√µes sobre nossos servi√ßos de decora√ß√£o " +
            "(Decor Interiores üõãÔ∏è, Decor Fachada üè° e Decor Pintura üé®), que renovam espa√ßos sem 'quebra-quebra'. " +
            "Se n√£o souber a resposta ou se o cliente solicitar falar com um humano, " +
            "informe que ir√° transferir para um atendente. üíú";
    
    // Express√µes regulares para detec√ß√£o de sauda√ß√µes
    private static final List<String> GREETING_PATTERNS = List.of(
            "\\boi\\b", "\\bol√°\\b", "\\bola\\b", "\\bhello\\b", "\\bhi\\b",
            "\\bbom dia\\b", "\\bboa tarde\\b", "\\bboa noite\\b", "\\bboa\\b",
            "\\btudo bem\\b", "\\bcomo vai\\b", "\\bhey\\b"
    );
    
    @Override
    public Message processInboundMessage(Message inboundMessage) {
        log.debug("Processando mensagem recebida do cliente: {}", inboundMessage.getCustomerId());
        
        // Verificar se o cliente existe ou criar um novo
        Customer customer = contextService.getOrCreateCustomer(inboundMessage.getCustomerId());
        
        // Buscar ou criar conversa ativa
        Conversation conversation = contextService.getOrCreateActiveConversation(customer);
        
        // Salvar mensagem de entrada
        Message savedMessage = contextService.saveUserMessage(
                conversation, 
                inboundMessage.getContent(), 
                inboundMessage.getWhatsappMessageId()
        );
        
        // Marcar como lida no WhatsApp
        if (inboundMessage.getWhatsappMessageId() != null) {
            whatsappService.markMessageAsRead(inboundMessage.getWhatsappMessageId());
        }
        
        // Gerar resposta
        Message response = generateResponse(conversation, savedMessage);
        
        return response;
    }
    
    /**
     * Gera uma resposta para a mensagem do usu√°rio usando o hist√≥rico de conversa
     * e an√°lise de contexto.
     * 
     * @param conversation A conversa ativa
     * @param userMessage A mensagem do usu√°rio
     * @return A mensagem de resposta gerada
     */
    public Message generateResponse(Conversation conversation, Message userMessage) {
        log.debug("Gerando resposta para a mensagem: {} na conversa: {}", 
                userMessage.getId(), conversation.getId());
        
        // Verificar se j√° foi transferido para atendimento humano
        if (conversation.isHandedOffToHuman()) {
            log.info("Conversa j√° transferida para atendimento humano. N√£o gerando resposta autom√°tica.");
            
            // Enviar mensagem leve de lembrete, se estiver aguardando h√° muito tempo
            if (conversation.getLastActivityTime() != null &&
                conversation.getLastActivityTime().plusMinutes(2).isBefore(LocalDateTime.now())) {
                return createHandoffReminderMessage(conversation, userMessage.getCustomerId());
            }
            
            return null;
        }
        
        // Recuperar hist√≥rico de mensagens
        List<Message> messageHistory = contextService.getConversationHistory(conversation);
        
        // Verificar se requer interven√ß√£o humana via detec√ß√£o com GPT
        String formattedHistory = contextService.formatConversationHistory(messageHistory);
        boolean needsHuman = gptService.requiresHumanIntervention(userMessage.getContent(), formattedHistory);
        
        // Verificar palavras-chave expl√≠citas para handoff
        boolean containsHandoffKeywords = containsHandoffKeywords(userMessage.getContent());
        
        // Se precisar de interven√ß√£o humana (por GPT ou palavras-chave)
        if ((needsHuman || containsHandoffKeywords) && !conversation.isHandedOffToHuman()) {
            log.info("Transferindo para atendimento humano. Detectado por: {}", 
                    containsHandoffKeywords ? "palavras-chave" : "an√°lise GPT");
            return createHumanTransferMessage(conversation, userMessage.getCustomerId());
        }
        
        // Verificar se √© uma sauda√ß√£o para uma conversa nova ou se √© a primeira mensagem
        String responseContent;
        if (isGreeting(userMessage.getContent()) && 
            (messageHistory.size() <= 1 || isFirstMessageInNewSession(conversation, messageHistory))) {
            log.info("Detectada sauda√ß√£o inicial, gerando resposta de boas-vindas");
            
            // Para sauda√ß√µes, utilizamos um prompt espec√≠fico (sem hist√≥rico necess√°rio)
            String greetingPrompt = promptBuilderService.buildGreetingPrompt();
            responseContent = gptService.generateResponse("", "", greetingPrompt);
        } else {
            // Para outras mensagens, usamos o prompt de FAQ que inclui a base de conhecimento
            log.debug("Gerando resposta com base no contexto e poss√≠vel FAQ");
            String faqPrompt = promptBuilderService.buildFaqPrompt(
                    userMessage.getContent(), 
                    formattedHistory, 
                    conversation.getContext());
                    
            responseContent = gptService.generateResponse(
                    "",  // Hist√≥rico j√° est√° no prompt
                    userMessage.getContent(), 
                    faqPrompt);
        }
        
        // Salvar resposta
        Message savedResponse = contextService.saveAssistantResponse(
                conversation, 
                responseContent
        );
        
        // Enviar pelo WhatsApp
        String whatsappMessageId = sendResponseViaWhatsapp(savedResponse, userMessage.getCustomerId());
        if (whatsappMessageId != null) {
            savedResponse.setWhatsappMessageId(whatsappMessageId);
            messageRepository.save(savedResponse);
        }
        
        // Atualizar contexto com entidades e inten√ß√£o detectadas
        updateConversationContext(conversation, userMessage.getContent(), responseContent);
        
        return savedResponse;
    }
    
    /**
     * Verifica se a mensagem √© uma sauda√ß√£o comum.
     * 
     * @param message Conte√∫do da mensagem a ser verificada
     * @return true se for uma sauda√ß√£o, false caso contr√°rio
     */
    private boolean isGreeting(String message) {
        if (message == null || message.trim().isEmpty()) {
            return false;
        }
        
        String normalized = message.toLowerCase().trim();
        
        // Verifica se √© uma mensagem muito curta (t√≠pico de sauda√ß√µes)
        if (normalized.split("\\s+").length <= 3) {
            // Verificar padr√µes de sauda√ß√£o usando express√µes regulares
            for (String pattern : GREETING_PATTERNS) {
                if (normalized.matches(".*" + pattern + ".*")) {
                    log.debug("Sauda√ß√£o detectada com padr√£o: {}", pattern);
                    return true;
                }
            }
        }
        
        return false;
    }
    
    /**
     * Verifica se √© a primeira mensagem em uma nova sess√£o de conversa.
     * √ötil para reapresentar sauda√ß√µes quando o cliente retorna ap√≥s um per√≠odo de inatividade.
     * 
     * @param conversation A conversa atual
     * @param messageHistory Hist√≥rico de mensagens
     * @return true se for a primeira mensagem de uma nova sess√£o
     */
    private boolean isFirstMessageInNewSession(Conversation conversation, List<Message> messageHistory) {
        if (messageHistory.size() <= 1) {
            return true;
        }
        
        // Se a √∫ltima atividade foi h√° mais de 6 horas, consideramos uma nova sess√£o
        LocalDateTime lastActivity = conversation.getLastActivityTime();
        return lastActivity != null && 
               lastActivity.plusHours(6).isBefore(LocalDateTime.now());
    }
    
    @Override
    public Message generateResponse(String conversationId, String messageId) {
        // Buscar mensagem original
        Message originalMessage = messageRepository.findById(messageId)
                .orElseThrow(() -> new IllegalArgumentException("Mensagem n√£o encontrada"));
        
        // Buscar conversa
        Conversation conversation = conversationService.findConversation(conversationId)
                .orElseThrow(() -> new IllegalArgumentException("Conversa n√£o encontrada"));
        
        return generateResponse(conversation, originalMessage);
    }
    
    /**
     * Atualiza o contexto da conversa com informa√ß√µes extra√≠das da mensagem atual.
     * 
     * @param conversation A conversa a ser atualizada
     * @param userMessage A mensagem do usu√°rio
     * @param responseContent A resposta gerada
     */
    private void updateConversationContext(Conversation conversation, String userMessage, String responseContent) {
        try {
            // Analisar inten√ß√£o
            String intent = gptService.analyzeIntent(userMessage);
            conversation.getContext().setCustomerIntent(intent);
            conversation.getContext().setLastDetectedTopic(intent);
            
            // Extrair entidades
            List<String> entities = gptService.extractEntities(userMessage);
            if (!entities.isEmpty()) {
                conversation.getContext().getIdentifiedEntities().addAll(entities);
            }
            
            // Atualizar timestamp da √∫ltima intera√ß√£o
            LocalDateTime now = LocalDateTime.now();
            conversation.getContext().setLastInteractionTime(now);
            conversation.setLastActivityTime(now);
            
            // Determinar o estado atual da conversa
            String currentState = determineConversationState(conversation, responseContent);
            conversation.getContext().setConversationState(currentState);
            
            // Se resumo autom√°tico estiver habilitado, gerar um resumo da conversa
            if (contextConfig.isSummaryEnabled()) {
                generateConversationSummary(conversation);
            }
            
            // Salvar contexto atualizado - usar o novo m√©todo que salva a conversa completa
            conversationService.updateConversation(conversation);
            
            log.debug("Contexto da conversa atualizado. Inten√ß√£o: {}, Entidades: {}, Estado: {}", 
                    intent, entities, currentState);
        } catch (Exception e) {
            log.error("Erro ao atualizar contexto da conversa: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Determina o estado atual da conversa com base no conte√∫do da resposta.
     * 
     * @param conversation A conversa atual
     * @param responseContent O conte√∫do da resposta gerada
     * @return O estado atual da conversa
     */
    private String determineConversationState(Conversation conversation, String responseContent) {
        // Se j√° foi transferido para humano, mant√©m esse estado
        if (conversation.isHandedOffToHuman()) {
            return "NECESSITA_INTERVENCAO";
        }
        
        // Verifica se a resposta indica que uma interven√ß√£o humana √© necess√°ria
        if (responseContent.toLowerCase().contains("atendente") ||
            responseContent.toLowerCase().contains("humano") ||
            responseContent.toLowerCase().contains("transferir")) {
            return "POSSIVEL_INTERVENCAO";
        }
        
        // Verifica se parece ser uma despedida
        if (responseContent.toLowerCase().contains("at√© logo") ||
            responseContent.toLowerCase().contains("adeus") ||
            responseContent.toLowerCase().contains("tchau")) {
            return "FINALIZANDO";
        }
        
        // Estado padr√£o - aguardando resposta do usu√°rio
        return "AGUARDANDO_USUARIO";
    }
    
    /**
     * Gera um resumo da conversa usando o servi√ßo GPT.
     * Essa √© uma funcionalidade avan√ßada que pode ser ativada via configura√ß√£o.
     * 
     * @param conversation A conversa a ser resumida
     */
    private void generateConversationSummary(Conversation conversation) {
        try {
            // Buscar as √∫ltimas mensagens para resumir (limitado a um n√∫mero menor que o contexto normal)
            List<Message> messages = messageRepository.findByConversationId(conversation.getId());
            if (messages.size() < 4) {
                // N√£o resumir conversas muito curtas
                return;
            }
            
            // Formatar as mensagens para o resumo
            StringBuilder messageHistory = new StringBuilder();
            for (Message message : messages) {
                String role = message.getDirection() == MessageDirection.INBOUND ? "Usu√°rio" : "Assistente";
                messageHistory.append(role).append(": ").append(message.getContent()).append("\n");
            }
            
            // Usar o PromptBuilderService para construir o prompt de resumo
            String summaryPrompt = promptBuilderService.buildSummaryPrompt(messageHistory.toString());
            
            // Chamar GPT para gerar o resumo
            String summary = gptService.generateResponse("", summaryPrompt, 
                    "Voc√™ √© um resumidor de conversas. Seja conciso e objetivo.");
            
            // Atualizar o resumo na conversa
            contextService.updateConversationSummary(conversation, summary);
            
            log.debug("Resumo da conversa gerado: {}", summary);
        } catch (Exception e) {
            log.error("Erro ao gerar resumo da conversa: {}", e.getMessage(), e);
        }
    }
    
    @Override
    public boolean transferToHuman(String conversationId, String reason) {
        log.debug("Transferindo conversa para atendimento humano: {}", conversationId);
        
        Conversation conversation = conversationService.findConversation(conversationId)
                .orElseThrow(() -> new IllegalArgumentException("Conversa n√£o encontrada"));
        
        if (conversation.isHandedOffToHuman()) {
            log.info("Conversa j√° transferida para atendimento humano: {}", conversationId);
            return true;
        }
        
        // Atualizar status da conversa
        conversation.setHandedOffToHuman(true);
        conversation.setStatus(ConversationStatus.WAITING_FOR_AGENT);
        conversationService.updateConversationStatus(conversationId, ConversationStatus.WAITING_FOR_AGENT);
        
        // Adicionar mensagem de notifica√ß√£o
        Customer customer = customerService.findCustomerByPhoneNumber(conversation.getCustomerId())
                .orElseThrow(() -> new IllegalArgumentException("Cliente n√£o encontrado"));
        
        Message transferMessage = Message.builder()
                .conversationId(conversationId)
                .customerId(customer.getId())
                .type(MessageType.TEXT)
                .direction(MessageDirection.OUTBOUND)
                .content("Sua conversa foi transferida para um atendente humano. " +
                        "Em breve algu√©m entrar√° em contato. Motivo: " + reason)
                .timestamp(LocalDateTime.now())
                .status(MessageStatus.SENT)
                .build();
        
        Message savedMessage = messageRepository.save(transferMessage);
        conversationService.addMessageToConversation(conversationId, savedMessage);
        
        // Enviar pelo WhatsApp
        String whatsappMessageId = whatsappService.sendTextMessage(
                customer.getPhoneNumber(), transferMessage.getContent());
        
        if (whatsappMessageId != null) {
            savedMessage.setWhatsappMessageId(whatsappMessageId);
            messageRepository.save(savedMessage);
        }
        
        log.info("Conversa transferida com sucesso para atendimento humano: {}", conversationId);
        return true;
    }
    
    @Override
    public boolean processMessageStatusUpdate(String messageId, MessageStatus status) {
        log.debug("Atualizando status da mensagem: {} para {}", messageId, status);
        
        Message message = messageRepository.findById(messageId)
                .orElseThrow(() -> new IllegalArgumentException("Mensagem n√£o encontrada"));
        
        message.setStatus(status);
        messageRepository.save(message);
        
        log.info("Status da mensagem atualizado com sucesso: {}", messageId);
        return true;
    }
    
    /**
     * Verifica se a mensagem do usu√°rio cont√©m palavras-chave expl√≠citas
     * solicitando atendimento humano.
     * 
     * @param message Conte√∫do da mensagem
     * @return true se cont√©m palavras-chave de handoff
     */
    private boolean containsHandoffKeywords(String message) {
        if (message == null || message.trim().isEmpty()) {
            return false;
        }
        
        String normalized = message.toLowerCase().trim();
        
        // Lista de palavras-chave que indicam pedido expl√≠cito de atendimento humano
        List<String> handoffKeywords = Arrays.asList(
            "falar com atendente", "falar com humano", "atendente humano", 
            "quero atendente", "quero falar com pessoa", "falar com pessoa",
            "atendente por favor", "preciso de atendente", "pessoa real",
            "quero falar com algu√©m", "falar com gente", "atendimento humano",
            "ajuda de verdade", "suporte", "falar com suporte",
            "pessoa de verdade", "sem bot", "n√£o quero falar com rob√¥"
        );
        
        return handoffKeywords.stream().anyMatch(normalized::contains);
    }
    
    /**
     * Cria uma mensagem de transfer√™ncia para atendimento humano.
     * 
     * @param conversation A conversa a ser transferida
     * @param customerId ID do cliente
     * @return Mensagem criada e salva
     */
    private Message createHumanTransferMessage(Conversation conversation, String customerId) {
        // Criar mensagem de transfer√™ncia com o estilo "Urba"
        Message transferMessage = Message.builder()
                .conversationId(conversation.getId())
                .customerId(customerId)
                .type(MessageType.TEXT)
                .direction(MessageDirection.OUTBOUND)
                .content("Entendi! üòâ Para te dar a aten√ß√£o super especial que voc√™ merece nesse ponto, " +
                        "vou acionar nossa equipe de especialistas em decora√ß√£o! üßë‚Äçüé® Fica tranquilo(a) que " +
                        "em breve algu√©m entrar√° em contato por aqui para continuar a conversa. At√© j√°! ‚ú®üíú")
                .timestamp(LocalDateTime.now())
                .status(MessageStatus.SENT)
                .build();
        
        Message savedMessage = messageRepository.save(transferMessage);
        conversationService.addMessageToConversation(conversation.getId(), savedMessage);
        
        // Atualizar status da conversa
        conversation.setHandedOffToHuman(true);
        conversation.getContext().setNeedsHumanIntervention(true);
        conversation.getContext().setConversationState("AGUARDANDO_ATENDENTE");
        conversation.setStatus(ConversationStatus.WAITING_FOR_AGENT);
        conversationService.updateConversation(conversation);
        
        // Enviar pelo WhatsApp
        Customer customer = customerService.findByPhoneNumber(customerId)
                .orElseThrow(() -> new IllegalArgumentException("Cliente n√£o encontrado"));
        
        String whatsappMessageId = whatsappService.sendTextMessage(
                customer.getPhoneNumber(), savedMessage.getContent());
        
        if (whatsappMessageId != null) {
            savedMessage.setWhatsappMessageId(whatsappMessageId);
            messageRepository.save(savedMessage);
        }
        
        return savedMessage;
    }
    
    /**
     * Cria uma mensagem de lembrete para o cliente que est√° aguardando atendimento humano.
     * 
     * @param conversation A conversa em aguardo
     * @param customerId ID do cliente
     * @return Mensagem de lembrete
     */
    private Message createHandoffReminderMessage(Conversation conversation, String customerId) {
        Message reminderMessage = Message.builder()
                .conversationId(conversation.getId())
                .customerId(customerId)
                .type(MessageType.TEXT)
                .direction(MessageDirection.OUTBOUND)
                .content("Nossa equipe j√° foi notificada e entrar√° em contato em breve! üòä " +
                        "Obrigada pela paci√™ncia. üíú")
                .timestamp(LocalDateTime.now())
                .status(MessageStatus.SENT)
                .build();
        
        Message savedMessage = messageRepository.save(reminderMessage);
        
        // Enviar pelo WhatsApp
        Customer customer = customerService.findByPhoneNumber(customerId)
                .orElseThrow(() -> new IllegalArgumentException("Cliente n√£o encontrado"));
        
        String whatsappMessageId = whatsappService.sendTextMessage(
                customer.getPhoneNumber(), savedMessage.getContent());
        
        if (whatsappMessageId != null) {
            savedMessage.setWhatsappMessageId(whatsappMessageId);
            messageRepository.save(savedMessage);
        }
        
        return savedMessage;
    }
    
    private String sendResponseViaWhatsapp(Message response, String customerId) {
        try {
            Customer customer = customerService.findById(customerId)
                    .orElseThrow(() -> new IllegalArgumentException("Cliente n√£o encontrado"));
            
            String messageId = whatsappService.sendTextMessage(
                    customer.getPhoneNumber(), response.getContent());
            
            if (messageId == null) {
                log.error("Falha ao enviar mensagem via WhatsApp para: {}", customer.getPhoneNumber());
            } else {
                log.info("Mensagem enviada com sucesso via WhatsApp. ID: {}", messageId);
            }
            
            return messageId;
        } catch (Exception e) {
            log.error("Erro ao enviar resposta via WhatsApp: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * Processa uma mensagem recebida, salvando nos reposit√≥rios apropriados
     * e gerando uma resposta utilizando a OpenAI.
     *
     * @param phoneNumber N√∫mero de telefone do cliente
     * @param messageContent Conte√∫do da mensagem
     * @param whatsappMessageId ID da mensagem no WhatsApp (opcional)
     * @return Resposta gerada para a mensagem
     */
    @Override
    public String processIncomingMessage(String phoneNumber, String messageContent, String whatsappMessageId) {
        log.debug("Processando mensagem de entrada: {}", messageContent);
        MDC.put("messageContent", messageContent);
        
        try {
            // 1. Buscar ou criar cliente e conversa
            Customer customer = contextService.getOrCreateCustomer(phoneNumber);
            Conversation conversation = contextService.getOrCreateActiveConversation(customer);
            
            MDC.put("customerId", customer.getId());
            MDC.put("conversationId", conversation.getId());
            
            // 2. Verifica se a conversa est√° finalizada
            if (contextService.isEnded(conversation)) {
                log.info("Conversa estava encerrada. Criando uma nova.");
                conversation = contextService.getOrCreateActiveConversation(customer);
            }
            
            // 3. Salvar mensagem do usu√°rio
            Message userMessage = contextService.saveUserMessage(conversation, messageContent, whatsappMessageId);
            
            // 4. Verificar se j√° est√° em handoff
            if (conversation.isHandedOffToHuman()) {
                log.info("Conversa j√° transferida para atendimento humano. Ignorando processamento autom√°tico.");
                return "Mensagem recebida. Aguardando atendimento humano.";
            }
            
            // 5. Obter hist√≥rico da conversa
            List<Message> conversationHistory = contextService.getConversationHistory(conversation);
            String formattedHistory = contextService.formatConversationHistory(conversationHistory);
            
            // 6. Verificar palavras-chave para handoff
            boolean containsHandoffKeywords = containsHandoffKeywords(messageContent);
            if (containsHandoffKeywords) {
                log.info("Palavras-chave de handoff detectadas. Transferindo para atendimento humano.");
                createHumanTransferMessage(conversation, phoneNumber);
                return "Transferindo para atendente humano...";
            }
            
            // 7. Analisar a inten√ß√£o do usu√°rio
            String intent = gptService.analyzeIntent(messageContent);
            log.info("Inten√ß√£o detectada: {}", intent);
            
            // 8. Verificar necessidade de interven√ß√£o humana via GPT
            boolean needsHuman = gptService.requiresHumanIntervention(messageContent, formattedHistory);
            if (needsHuman) {
                log.info("Mensagem requer interven√ß√£o humana segundo an√°lise do GPT");
                createHumanTransferMessage(conversation, phoneNumber);
                return "Transferindo para atendente humano...";
            }
            
            // 9. Gerar resposta com GPT
            String response = gptService.generateResponse(formattedHistory, messageContent, SYSTEM_PROMPT);
            
            // 10. Extrair entidades e atualizar contexto da conversa
            List<String> entities = gptService.extractEntities(messageContent);
            String entitiesStr = String.join(", ", entities);
            
            // 11. Atualizar o contexto da conversa
            contextService.updateConversationContext(
                    conversation, 
                    intent, 
                    entitiesStr
            );
            
            // 12. Salvar resposta do assistente
            Message assistantMessage = contextService.saveAssistantResponse(conversation, response);
            
            log.info("Resposta gerada com sucesso: {}", response);
            return response;
        } catch (Exception e) {
            log.error("Erro ao processar mensagem: {}", e.getMessage(), e);
            return "Ops! üòÖ Parece que tive um probleminha t√©cnico. Poderia tentar me perguntar de novo? Ou, se preferir, diga 'falar com atendente' para chamar nossa equipe.";
        } finally {
            MDC.remove("messageContent");
            MDC.remove("customerId");
            MDC.remove("conversationId");
        }
    }
    
    /**
     * Processa uma notifica√ß√£o de leitura de mensagem do WhatsApp.
     *
     * @param whatsappMessageId ID da mensagem no WhatsApp
     * @return true se processado com sucesso, false caso contr√°rio
     */
    @Override
    public boolean processReadReceipt(String whatsappMessageId) {
        log.debug("Processando confirma√ß√£o de leitura para mensagem: {}", whatsappMessageId);
        
        try {
            Optional<Message> message = messageRepository.findByWhatsappMessageId(whatsappMessageId);
            
            if (message.isPresent()) {
                Message updatedMessage = message.get();
                updatedMessage.setRead(true);
                updatedMessage.setReadAt(LocalDateTime.now());
                messageRepository.save(updatedMessage);
                log.info("Mensagem marcada como lida: {}", whatsappMessageId);
                return true;
            } else {
                log.warn("Mensagem n√£o encontrada para confirma√ß√£o de leitura: {}", whatsappMessageId);
                return false;
            }
        } catch (Exception e) {
            log.error("Erro ao processar confirma√ß√£o de leitura: {}", e.getMessage(), e);
            return false;
        }
    }
} 