package br.com.urbana.connect.domain.service;

import br.com.urbana.connect.domain.model.ConversationContext;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.format.DateTimeFormatter;
import java.util.Locale;

/**
 * Servi√ßo respons√°vel pela constru√ß√£o e otimiza√ß√£o de prompts para a API da OpenAI.
 * Formata as instru√ß√µes do sistema, hist√≥rico da conversa e mensagem atual, otimizando
 * o uso do contexto para melhorar a qualidade e relev√¢ncia das respostas.
 */
@Service
@Slf4j
public class PromptBuilderService {
    
    @Value("${openai.system-prompt:Voc√™ √© Urba üòâ, assistente virtual da Urbana do Brasil, especialista em Arquitetura e Decora√ß√£o.}")
    private String defaultSystemPrompt;
    
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm").withLocale(new Locale("pt", "BR"));
    
    /**
     * Constr√≥i um prompt completo para a API da OpenAI, combinando as instru√ß√µes do sistema,
     * o hist√≥rico da conversa e a mensagem atual do usu√°rio, incorporando informa√ß√µes de contexto.
     * 
     * @param userMessage Mensagem atual do usu√°rio
     * @param conversationHistory Hist√≥rico formatado da conversa
     * @param context Objeto de contexto da conversa (opcional)
     * @return Prompt completo para envio √† API da OpenAI
     */
    public String buildPrompt(String userMessage, String conversationHistory, ConversationContext context) {
        log.debug("Construindo prompt com hist√≥rico de {} caracteres", 
                conversationHistory != null ? conversationHistory.length() : 0);
        
        StringBuilder promptBuilder = new StringBuilder();
        
        // Adicionar instru√ß√µes do sistema (comportamento e diretrizes)
        promptBuilder.append(getSystemInstructions(context))
                .append("\n\n");
        
        // Adicionar contexto da conversa se dispon√≠vel
        if (context != null) {
            promptBuilder.append(buildContextSection(context))
                    .append("\n\n");
        }
        
        // Adicionar hist√≥rico da conversa se existir
        if (conversationHistory != null && !conversationHistory.isEmpty()) {
            promptBuilder.append("### Hist√≥rico da conversa:\n")
                    .append(conversationHistory)
                    .append("\n\n");
        }
        
        // Adicionar mensagem atual do usu√°rio
        promptBuilder.append("### Mensagem atual:\n")
                .append(userMessage);
        
        String prompt = promptBuilder.toString();
        log.debug("Prompt constru√≠do com {} caracteres", prompt.length());
        
        return prompt;
    }
    
    /**
     * Sobrecarga do m√©todo buildPrompt que n√£o requer o contexto da conversa.
     * 
     * @param userMessage Mensagem atual do usu√°rio
     * @param conversationHistory Hist√≥rico formatado da conversa
     * @return Prompt completo para envio √† API da OpenAI
     */
    public String buildPrompt(String userMessage, String conversationHistory) {
        return buildPrompt(userMessage, conversationHistory, null);
    }
    
    /**
     * Constr√≥i a se√ß√£o de contexto da conversa com informa√ß√µes relevantes para o modelo.
     * 
     * @param context Objeto de contexto da conversa
     * @return String formatada com informa√ß√µes de contexto
     */
    private String buildContextSection(ConversationContext context) {
        if (context == null) {
            return "";
        }
        
        StringBuilder contextBuilder = new StringBuilder("### Informa√ß√µes de contexto:\n");
        
        // Adicionar t√≥pico detectado se dispon√≠vel
        if (context.getLastDetectedTopic() != null) {
            contextBuilder.append("- T√≥pico atual: ").append(context.getLastDetectedTopic()).append("\n");
        }
        
        // Adicionar inten√ß√£o se dispon√≠vel
        if (context.getCustomerIntent() != null) {
            contextBuilder.append("- Inten√ß√£o do cliente: ").append(context.getCustomerIntent()).append("\n");
        }
        
        // Adicionar entidades identificadas
        if (context.getIdentifiedEntities() != null && !context.getIdentifiedEntities().isEmpty()) {
            contextBuilder.append("- Entidades mencionadas: ")
                    .append(String.join(", ", context.getIdentifiedEntities()))
                    .append("\n");
        }
        
        // Adicionar estado da conversa
        if (context.getConversationState() != null) {
            contextBuilder.append("- Estado da conversa: ").append(context.getConversationState()).append("\n");
        }
        
        // Adicionar hora da √∫ltima intera√ß√£o se dispon√≠vel
        if (context.getLastInteractionTime() != null) {
            contextBuilder.append("- √öltima intera√ß√£o em: ")
                    .append(DATE_FORMATTER.format(context.getLastInteractionTime()))
                    .append("\n");
        }
        
        // Adicionar resumo da conversa se dispon√≠vel
        if (context.getConversationSummary() != null) {
            contextBuilder.append("- Resumo da conversa: ").append(context.getConversationSummary()).append("\n");
        }
        
        return contextBuilder.toString();
    }
    
    /**
     * Obt√©m as instru√ß√µes do sistema (system prompt) personalizadas com base no contexto.
     * 
     * @param context Objeto de contexto da conversa (opcional)
     * @return Instru√ß√µes do sistema formatadas
     */
    private String getSystemInstructions(ConversationContext context) {
        StringBuilder instructionsBuilder = new StringBuilder();
        
        // Personalizar conforme o estado da conversa, se dispon√≠vel
        String basePrompt = defaultSystemPrompt;
        if (context != null && context.isNeedsHumanIntervention()) {
            basePrompt += " Percebo que esta conversa pode requerer atendimento humano em breve.";
        }
        
        instructionsBuilder.append(basePrompt).append("\n\n");
        
        // Adicionar diretrizes de comportamento
        instructionsBuilder.append("""
                ## Instru√ß√µes:
                - Voc√™ √© Urba üòâ, assistente virtual da Urbana do Brasil, empresa de Arquitetura e Decora√ß√£o ("Made in Para√≠ba").
                - Use linguagem informal, acess√≠vel, entusiasmada, com tom amig√°vel e positivo.
                - Utilize emojis frequentemente (üíú, üòâ, ü§î, üõãÔ∏è, üè°, üé®, üéâ, ‚ú®, üëç, ü§©, ‚úåÔ∏è, etc.) para transmitir emo√ß√£o e engajamento.
                - Suas respostas devem ser descomplicadas, transparentes e emp√°ticas.
                - Forne√ßa informa√ß√µes sobre os servi√ßos de decora√ß√£o: Decor (Interiores), Decor Fachada e Decor Pintura.
                - Enfatize que nossos servi√ßos renovam espa√ßos sem "quebra-quebra".
                - Se o cliente demonstrar frustra√ß√£o ou pedir explicitamente, ofere√ßa transferir para um atendente humano.
                - Se n√£o souber a resposta, seja honesta e diga que n√£o tem essa informa√ß√£o.
                - Nunca invente informa√ß√µes sobre pre√ßos, prazos ou servi√ßos que n√£o conhece.
                - Mantenha o foco nos servi√ßos de renova√ß√£o e decora√ß√£o da Urbana do Brasil.
                """);
        
        return instructionsBuilder.toString();
    }
    
    /**
     * Constr√≥i um prompt para an√°lise de inten√ß√£o do usu√°rio.
     * 
     * @param userMessage Mensagem do usu√°rio a ser analisada
     * @return Prompt para an√°lise de inten√ß√£o
     */
    public String buildIntentAnalysisPrompt(String userMessage) {
        return """
                Analise a seguinte mensagem do usu√°rio e determine sua inten√ß√£o principal.
                
                ## Mensagem:
                "%s"
                
                ## Instru√ß√µes:
                - Identifique a principal inten√ß√£o do usu√°rio na mensagem acima.
                - Responda APENAS com uma das categorias abaixo, sem explica√ß√µes adicionais:
                
                ## Categorias:
                - DUVIDA_SERVICO: Quando o usu√°rio pergunta sobre servi√ßos de decora√ß√£o ou como funcionam
                - AGENDAMENTO: Quando o usu√°rio quer agendar, remarcar ou verificar um projeto
                - RECLAMACAO: Quando o usu√°rio expressa insatisfa√ß√£o ou relata um problema
                - CANCELAMENTO: Quando o usu√°rio quer cancelar um servi√ßo ou contrato
                - CONTATO_HUMANO: Quando o usu√°rio solicita explicitamente falar com um atendente humano
                - PRECO_PAGAMENTO: Quando o usu√°rio pergunta sobre pre√ßos, formas de pagamento ou faturas
                - ELOGIO: Quando o usu√°rio expressa satisfa√ß√£o ou agradecimento
                - OUTRO: Para inten√ß√µes que n√£o se encaixam nas categorias acima
                """.formatted(userMessage);
    }
    
    /**
     * Constr√≥i um prompt para avaliar se a mensagem requer interven√ß√£o humana.
     * 
     * @param userMessage Mensagem do usu√°rio
     * @param conversationHistory Hist√≥rico da conversa
     * @return Prompt para avalia√ß√£o de necessidade de interven√ß√£o humana
     */
    public String buildHumanInterventionPrompt(String userMessage, String conversationHistory) {
        StringBuilder promptBuilder = new StringBuilder();
        
        promptBuilder.append("""
                Voc√™ √© um analisador especializado em determinar quando uma conversa deve ser transferida para atendimento humano.
                                
                ## Instru√ß√µes:
                - Avalie a conversa e a mensagem atual para determinar se √© necess√°rio transferir para um atendente humano.
                - Responda APENAS com "SIM" ou "N√ÉO" sem explica√ß√µes adicionais.
                
                ## Crit√©rios para transferir (responder SIM):
                - O usu√°rio pede explicitamente para falar com um humano/atendente/pessoa
                - O usu√°rio demonstra frustra√ß√£o significativa ou irrita√ß√£o (linguagem agressiva, pontua√ß√£o excessiva)
                - O usu√°rio repete a mesma pergunta ap√≥s receber resposta (indicando que n√£o ficou satisfeito)
                - O usu√°rio faz perguntas extremamente espec√≠ficas sobre projetos de decora√ß√£o que exigem conhecimento especializado
                - O usu√°rio menciona emerg√™ncia ou situa√ß√£o urgente relacionada a um projeto
                - O usu√°rio est√° reclamando sobre um problema n√£o resolvido
                - O usu√°rio usa linguagem que indica que respostas autom√°ticas n√£o est√£o ajudando
                
                """);
        
        // Adicionar hist√≥rico se existir
        if (conversationHistory != null && !conversationHistory.isEmpty()) {
            promptBuilder.append("## Hist√≥rico da conversa:\n")
                    .append(conversationHistory)
                    .append("\n\n");
        }
        
        // Adicionar mensagem atual
        promptBuilder.append("## Mensagem atual do usu√°rio:\n")
                .append(userMessage);
        
        return promptBuilder.toString();
    }
    
    /**
     * Constr√≥i um prompt para extra√ß√£o de entidades relevantes da mensagem do usu√°rio.
     * 
     * @param userMessage Mensagem do usu√°rio
     * @return Prompt para extra√ß√£o de entidades
     */
    public String buildEntityExtractionPrompt(String userMessage) {
        return """
                Voc√™ √© um sistema de extra√ß√£o de entidades especializado em identificar informa√ß√µes relevantes em mensagens.
                
                ## Mensagem:
                "%s"
                
                ## Instru√ß√µes:
                - Extraia entidades relevantes da mensagem acima.
                - Responda em formato JSON com apenas as entidades presentes na mensagem.
                - N√£o invente ou adicione informa√ß√µes que n√£o est√£o expl√≠citas na mensagem.
                - Se uma categoria n√£o estiver presente na mensagem, omita-a completamente do resultado.
                
                ## Categorias a extrair:
                - nome: Nome completo do cliente
                - endereco: Endere√ßo completo ou parcial mencionado
                - bairro: Bairro mencionado
                - cidade: Cidade mencionada
                - telefone: N√∫mero de telefone mencionado
                - email: Endere√ßo de email mencionado
                - data: Qualquer data mencionada (agendamento, visita, etc.)
                - horario: Qualquer hor√°rio mencionado
                - servico: Tipo de servi√ßo de decora√ß√£o mencionado (Decor, Decor Fachada, Decor Pintura)
                - ambiente: Ambientes ou espa√ßos mencionados (sala, quarto, cozinha, √°rea externa, etc.)
                - estilo: Estilos de decora√ß√£o mencionados (moderno, r√∫stico, minimalista, etc.)
                - valor: Valores monet√°rios, pre√ßos ou refer√™ncias a dinheiro
                - problema: Descri√ß√£o de problemas ou reclama√ß√µes espec√≠ficas
                """.formatted(userMessage);
    }
    
    /**
     * Constr√≥i um prompt para gerar um resumo da conversa.
     * 
     * @param conversationHistory Hist√≥rico formatado da conversa
     * @return Prompt para gerar resumo
     */
    public String buildSummaryPrompt(String conversationHistory) {
        return """
                ## Tarefa: Resumir Conversa
                
                Voc√™ √© um resumidor profissional de conversas. Sua tarefa √© criar um resumo conciso
                da conversa abaixo, destacando pontos principais, perguntas do cliente, 
                informa√ß√µes fornecidas e eventuais problemas/solu√ß√µes discutidos.
                
                ## Conversa a ser resumida:
                %s
                
                ## Instru√ß√µes:
                - Seja objetivo e direto
                - Capture os pontos principais da intera√ß√£o
                - Identifique t√≥picos/servi√ßos discutidos
                - Destaque qualquer necessidade especial mencionada pelo cliente
                - N√£o ultrapasse 3-4 frases no total
                """.formatted(conversationHistory);
    }
    
    /**
     * Constr√≥i um prompt espec√≠fico para gerar sauda√ß√µes iniciais.
     * Este prompt √© otimizado para criar respostas de boas-vindas
     * no estilo da persona "Urba", com tom amig√°vel e uso de emojis.
     * 
     * @return Prompt para gerar sauda√ß√£o personalizada
     */
    public String buildGreetingPrompt() {
        return """
                ## Tarefa: Gerar Sauda√ß√£o Inicial
                
                Como Urba, assistente virtual da Urbana do Brasil (empresa de Arquitetura e Decora√ß√£o),
                crie uma sauda√ß√£o calorosa e amig√°vel para iniciar a conversa com o cliente.
                
                ## Persona "Urba":
                - Extremamente amig√°vel e acolhedora
                - Entusiasmada e positiva
                - Usa linguagem informal/coloquial
                - Utiliza MUITOS emojis (üòâ, ü§î, üõãÔ∏è, üè°, üé®, üéâ, ‚ú®, üëç, ü§©, üíú)
                - Tom descomplicado e acess√≠vel
                
                ## Elementos que a sauda√ß√£o deve conter:
                - Dar boas-vindas calorosas
                - Apresentar-se brevemente como assistente da Urbana do Brasil (especialista em Arquitetura e Decora√ß√£o)
                - Mencionar que ajuda com servi√ßos de renova√ß√£o "sem quebra-quebra"
                - Sugerir o que o usu√°rio pode perguntar (sobre servi√ßos, pre√ßos, como funciona)
                - Terminar com pergunta aberta sobre como pode ajudar hoje
                - Incluir pelo menos 3-4 emojis diferentes
                
                ## Importante:
                - Mantenha a resposta concisa (m√°ximo 3-4 frases)
                - Seja calorosa mas n√£o excessivamente formal
                - N√ÉO mencione servi√ßos de coleta de lixo ou limpeza urbana
                - Enfatize os servi√ßos: Decor Interiores, Decor Fachada, e Decor Pintura
                """;
    }
    
    /**
     * Constr√≥i um prompt para perguntas frequentes (FAQ) incorporando uma base de conhecimento
     * com respostas pr√©-definidas para perguntas comuns sobre os servi√ßos.
     * 
     * @param userMessage Mensagem do usu√°rio
     * @param conversationHistory Hist√≥rico da conversa
     * @param context Objeto de contexto da conversa (opcional)
     * @return Prompt otimizado para respostas de FAQ
     */
    public String buildFaqPrompt(String userMessage, String conversationHistory, ConversationContext context) {
        StringBuilder promptBuilder = new StringBuilder();
        
        // Adicionar instru√ß√µes do sistema (comportamento e diretrizes)
        promptBuilder.append(getSystemInstructions(context))
                .append("\n\n");
        
        // Adicionar base de conhecimento (FAQ)
        promptBuilder.append("""
                ## Base de Conhecimento - Perguntas Frequentes
                Consulte estas informa√ß√µes ANTES de responder. Se a pergunta do usu√°rio for similar a alguma destas,
                use a resposta correspondente como base, mantendo o tom e estilo da persona Urba.
                
                [PERGUNTA]: Quais servi√ßos voc√™s oferecem?
                [RESPOSTA]: Que legal que perguntou! üéâ Oferecemos solu√ß√µes de decora√ß√£o super bacanas e sem quebra-quebra! Temos o Decor Interiores üõãÔ∏è, Decor Fachada üè° e Decor Pintura üé®. Quer saber mais sobre algum deles? üòâ
                
                [PERGUNTA]: O que significa "sem quebra-quebra"?
                [RESPOSTA]: Significa que nossas solu√ß√µes focam em renovar seu espa√ßo usando decora√ß√£o, pintura, m√≥veis e objetos, evitando grandes reformas estruturais, poeira e o stress de uma obra tradicional! ‚ú®
                
                [PERGUNTA]: Como funciona o "fa√ßa voc√™ mesmo"?
                [RESPOSTA]: Para o Decor Interiores e Decor Pintura, temos uma op√ß√£o onde te entregamos um guia super detalhado com v√≠deos e tutoriais para voc√™ mesmo(a) colocar a m√£o na massa e economizar! üë∑‚Äç‚ôÄÔ∏èüë∑‚Äç‚ôÇÔ∏è
                
                [PERGUNTA]: Qual o pre√ßo do Decor Interiores?
                [RESPOSTA]: Nosso Decor Interiores tem um valor super acess√≠vel de R$350 por ambiente (at√© 20m¬≤)! üòä Para os outros servi√ßos, como Decor Fachada e Pintura, precisamos entender um pouquinho mais sobre seu espa√ßo pra te passar um or√ßamento certinho. üëç
                
                [PERGUNTA]: Que informa√ß√µes voc√™s precisam para um or√ßamento?
                [RESPOSTA]: Pra gente preparar um or√ßamento perfeito pra voc√™, geralmente pedimos fotos ou v√≠deos do espa√ßo üì∑, as medidas (largura x comprimento) üìê e uma descri√ß√£o do que voc√™ deseja! Bem simples! üòÑ
                
                [PERGUNTA]: Quais cidades/regi√µes voc√™s atendem?
                [RESPOSTA]: Somos de Campina Grande, PB, com muito orgulho! üåµ Atendemos principalmente a regi√£o do Nordeste, mas fala pra gente onde voc√™ est√° que vemos o que podemos fazer! üòâ
                """)
                .append("\n\n");
        
        // Adicionar contexto da conversa se dispon√≠vel
        if (context != null) {
            promptBuilder.append(buildContextSection(context))
                    .append("\n\n");
        }
        
        // Adicionar hist√≥rico da conversa se existir
        if (conversationHistory != null && !conversationHistory.isEmpty()) {
            promptBuilder.append("### Hist√≥rico da conversa:\n")
                    .append(conversationHistory)
                    .append("\n\n");
        }
        
        // Adicionar mensagem atual do usu√°rio
        promptBuilder.append("### Mensagem atual:\n")
                .append(userMessage);
        
        return promptBuilder.toString();
    }
} 