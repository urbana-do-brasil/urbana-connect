name: Terraform CI/CD para Infraestrutura Modular

on:
  workflow_dispatch:

  pull_request:
    branches:
      - main
    paths:
      - 'infra/terraform/**'

  push:
    branches:
      - main
    paths:
      - 'infra/terraform/**'

permissions:
  contents: read # Necess√°rio para actions/checkout
  # pull-requests: write # Descomente se precisar que o bot comente o plano no PR

jobs:
  terraform_cluster:
    name: 'Terraform - DOKS Cluster'
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true

    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform/01-doks-cluster

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.x

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -no-color

  terraform_kube_addons:
    name: 'Terraform - Kubernetes Addons'
    runs-on: ubuntu-latest
    needs: terraform_cluster
    if: always() && (needs.terraform_cluster.result == 'success' || github.event_name == 'pull_request')
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true

    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform/02-kube-addons

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Copiar arquivos de configura√ß√£o K8s
      run: cp -r ${{ github.workspace }}/infra/k8s/prometheus ./prometheus

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.x

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -no-color

    - name: Wait for Load Balancer
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.apply.outcome == 'success'
      run: |
        echo "Aguardando provisionamento do Load Balancer..."
        sleep 60  # Tempo de espera para garantir que o Load Balancer esteja pronto

  terraform_app_platform:
    name: 'Terraform - Application Platform'
    runs-on: ubuntu-latest
    needs: terraform_kube_addons
    if: always() && (needs.terraform_kube_addons.result == 'success' || github.event_name == 'pull_request')
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      TF_INPUT: false
      TF_IN_AUTOMATION: true

    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform/03-app-platform

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.x

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -no-color

    - name: Exibir informa√ß√µes importantes
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.apply.outcome == 'success'
      run: |
        echo "============================================="
        echo "üöÄ Infraestrutura atualizada com sucesso!"
        echo "üìã Execute 'terraform output load_balancer_ip' no m√≥dulo 03-app-platform"
        echo "   para obter o IP do Load Balancer para configura√ß√£o de DNS"
        echo "============================================="
        echo "‚ö†Ô∏è IMPORTANTE: Atualize seu DNS para apontar api.urbanadobrasil.com para o IP do Load Balancer"
        echo "============================================="