name: Deploy para Kubernetes

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Versão da imagem a ser implantada (formato: X.Y.Z)'
        required: true
        default: '1.0.0'
        type: string

jobs:
  deploy:
    name: Deploy para DOKS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Configurar kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Salvar kubeconfig do cluster
      run: doctl kubernetes cluster kubeconfig save urbana-connect-cluster

    - name: Configurar credenciais do registro DigitalOcean
      run: |
        echo "Verificando acesso ao registro DigitalOcean..."
        
        # Verificar se o namespace existe
        echo "Verificando namespace urbana-connect..."
        kubectl get namespace urbana-connect || { 
          echo "ERRO: Namespace urbana-connect não existe!"; 
          echo "Verifique se o workflow de infraestrutura (terraform-infra.yml) foi executado com sucesso."; 
          exit 1; 
        }
        
        # Verificar se o secret do registro existe
        echo "Verificando se o secret do-registry-credentials existe..."
        kubectl get secret do-registry-credentials -n urbana-connect || {
          echo "ERRO: Secret do-registry-credentials não existe!"; 
          echo "Verifique se o workflow de infraestrutura (terraform-infra.yml) foi executado com sucesso."; 
          exit 1;
        }

    - name: Verificar se a imagem existe no registro
      run: |
        echo "Verificando se a imagem existe no registro da DigitalOcean..."
        
        # Se a versão for vazia, usar 'latest'
        VERSION="${{ inputs.version }}"
        if [ -z "$VERSION" ]; then
          VERSION="latest"
          echo "Nenhuma versão especificada, usando 'latest' como padrão"
        fi
        
        echo "Procurando por: urbana-connect:$VERSION"
        
        # Lista os repositórios disponíveis
        REPOS=$(doctl registry repository list-v2)
        
        # Verifica se o repositório urbana-connect existe
        if echo "$REPOS" | grep -q "urbana-connect"; then
          echo "✅ Repositório urbana-connect encontrado!"
          echo "ℹ️ Prosseguindo com o deployment usando a tag: $VERSION"
        else
          echo "⚠️ ATENÇÃO: O repositório urbana-connect não foi encontrado no registro!"
          echo "Por favor, verifique se você já fez o build e push da imagem para o registro."
          exit 1
        fi

    - name: Criar secrets da aplicação
      run: |
        echo "Configurando secrets da aplicação..."
        
        # Criar secret URI do MongoDB para a aplicação (usando MongoDB Atlas)
        echo "Criando secret URI do MongoDB para a aplicação..."
        kubectl create secret generic urbana-connect-mongodb-uri \
          --from-literal=MONGODB_URI="${{ secrets.MONGODB_URI }}" \
          --namespace=urbana-connect \
          --dry-run=client -o yaml | kubectl apply -f -
        
        echo "Criando secret do OpenAI..."
        kubectl create secret generic urbana-connect-openai \
          --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          --namespace=urbana-connect \
          --dry-run=client -o yaml | kubectl apply -f -
        
        echo "Criando secret do WhatsApp..."
        kubectl create secret generic urbana-connect-whatsapp \
          --from-literal=WHATSAPP_PHONE_NUMBER_ID=${{ secrets.WHATSAPP_PHONE_NUMBER_ID }} \
          --from-literal=WHATSAPP_ACCESS_TOKEN=${{ secrets.WHATSAPP_ACCESS_TOKEN }} \
          --from-literal=WHATSAPP_VERIFY_TOKEN=${{ secrets.WHATSAPP_VERIFY_TOKEN }} \
          --namespace=urbana-connect \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Atualizar imagem no deployment
      run: |
        # Se a versão for vazia, usar 'latest'
        VERSION="${{ inputs.version }}"
        if [ -z "$VERSION" ]; then
          VERSION="latest"
          echo "Nenhuma versão especificada, usando 'latest' como padrão"
        fi
        
        echo "Atualizando para a versão $VERSION no deployment..."
        
        # Atualiza a tag da imagem no arquivo deployment.yaml
        sed -i "s|image: registry.digitalocean.com/urbana-connect-registry/urbana-connect:.*|image: registry.digitalocean.com/urbana-connect-registry/urbana-connect:$VERSION|g" infra/k8s/app/deployment.yaml

    - name: Aplicar Manifestos K8s com Kustomize
      run: |
        echo "Aplicando manifestos Kubernetes com Kustomize..."
        kubectl apply -k infra/k8s/app/
        
        echo "Verificando status dos pods..."
        kubectl get pods -n urbana-connect

    - name: Verificar o status do rollout do deployment urbana-connect
      run: |
        echo "Verificando o status do rollout do deployment urbana-connect..."
        
        # Aumentar o timeout para 300s (5 minutos)
        timeout_seconds=300
        start_time=$(date +%s)
        end_time=$((start_time + timeout_seconds))
        
        # Loop para verificar status do rollout
        while [ $(date +%s) -lt $end_time ]; do
          echo "Verificando status dos pods..."
          kubectl get pods -n urbana-connect
          
          # Verificar se o deployment está disponível
          if kubectl rollout status deployment/urbana-connect -n urbana-connect --timeout=10s; then
            echo "Deployment concluído com sucesso!"
            exit 0
          fi
          
          # Se encontrarmos erros de imagem, verificamos os detalhes
          if kubectl get pods -n urbana-connect -o jsonpath='{.items[*].status.containerStatuses[*].state.waiting.reason}' | grep -q "ImagePull"; then
            echo "Erro de ImagePull detectado. Verificando detalhes dos pods:"
            kubectl describe pods -n urbana-connect
          fi
          
          echo "Aguardando 15 segundos..."
          sleep 15
        done
        
        echo "Timeout excedido. Coletando informações finais de diagnóstico:"
        kubectl describe deployment urbana-connect -n urbana-connect
        kubectl get pods -n urbana-connect -o wide
        
        exit 1 