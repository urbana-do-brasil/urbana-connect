name: Deploy para Kubernetes

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Versão da imagem a ser implantada (formato: X.Y.Z)'
        required: true
        default: '1.0.0'
        type: string

jobs:
  deploy:
    name: Deploy para DOKS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Configurar kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configurar KUBECONFIG
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Atualizar Tag da Imagem no deployment.yaml
      run: |
        echo "Instalando yq..."
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
        echo "Atualizando a imagem no Deployment dentro de infra/k8s/app/deployment.yaml para a versão ${{ inputs.version }}..."
        yq -i 'select(.kind == "Deployment").spec.template.spec.containers[0].image = "registry.digitalocean.com/urbana-connect-registry/urbana-connect:${{ inputs.version }}"' infra/k8s/app/deployment.yaml
        echo "Conteúdo atualizado do deployment.yaml:"
        cat infra/k8s/app/deployment.yaml

    - name: Aplicar Manifestos K8s com Kustomize
      run: |
        echo "Aplicando manifestos do diretório infra/k8s/app/ usando kustomize..."
        kubectl apply -k infra/k8s/app/ -n urbana-connect
        echo "Manifestos aplicados."

    - name: Verificar status do rollout
      id: rollout_status
      run: |
        echo "Verificando o status do rollout do deployment urbana-connect..."
        kubectl rollout status deployment/urbana-connect -n urbana-connect --timeout=180s
        echo "Rollout concluído."

    - name: Diagnosticar Falha no Rollout
      if: failure() && steps.rollout_status.conclusion == 'failure'
      run: |
        echo "::error::O rollout do deployment falhou. Coletando informações de diagnóstico..."
        echo "Instalando jq..."
        sudo apt-get update && sudo apt-get install -y jq

        echo "--- Descrevendo Deployment urbana-connect ---"
        kubectl describe deployment urbana-connect -n urbana-connect || echo "Falha ao descrever o deployment."

        echo "--- Listando Pods no namespace urbana-connect ---"
        kubectl get pods -n urbana-connect -o wide || echo "Falha ao listar pods."

        # Obter o nome do ReplicaSet mais recente
        REPLICA_SET=$(kubectl get rs -n urbana-connect -l app=urbana-connect -o json | jq -r '.items | sort_by(.metadata.creationTimestamp) | last | .metadata.name // empty')
        if [ -z "$REPLICA_SET" ]; then
          echo "Não foi possível encontrar o ReplicaSet mais recente."
          exit 0 # Sair do script de diagnóstico se não encontrar RS
        fi
        echo "--- Descrevendo ReplicaSet mais recente ($REPLICA_SET) ---"
        kubectl describe rs $REPLICA_SET -n urbana-connect || echo "Falha ao descrever o ReplicaSet $REPLICA_SET."

        # Listar pods gerenciados pelo ReplicaSet mais recente
        echo "--- Listando Pods do ReplicaSet mais recente ($REPLICA_SET) ---"
        PODS_JSON=$(kubectl get pods -n urbana-connect -l app=urbana-connect -o json)
        POD_NAMES=$(echo "$PODS_JSON" | jq -r --arg rs "$REPLICA_SET" '.items[] | select(.metadata.ownerReferences[0].name == $rs) | .metadata.name // empty')

        if [ -z "$POD_NAMES" ]; then
          echo "Não foram encontrados pods para o ReplicaSet $REPLICA_SET."
        else
          echo "Pods encontrados: $POD_NAMES"
          for POD in $POD_NAMES; do
            echo "--- Descrevendo Pod $POD ---"
            kubectl describe pod $POD -n urbana-connect || echo "Falha ao descrever o pod $POD."
            echo "--- Logs do Pod $POD (últimas 200 linhas) ---"
            kubectl logs $POD -n urbana-connect --tail=200 || echo "Falha ao obter logs do pod $POD."
            echo "--- Logs Anteriores do Pod $POD (se houver) ---"
            kubectl logs $POD -n urbana-connect --previous --tail=200 || echo "Sem logs anteriores ou falha ao obter para o pod $POD."
          done
        fi
        # Forçar a falha do workflow para garantir visibilidade do erro
        exit 1 