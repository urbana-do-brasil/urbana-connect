name: Deploy para Produção

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Versão para deploy em produção'
        required: true
      confirm:
        description: 'Confirmar deploy para produção? (yes/no)'
        required: true
        default: 'no'

jobs:
  validate:
    name: Validar Aprovação
    runs-on: ubuntu-latest
    steps:
      - name: Verificar confirmação
        if: ${{ github.event.inputs.confirm != 'yes' }}
        run: |
          echo "Deploy não confirmado. Por favor, confirme com 'yes'."
          exit 1

  deploy-production:
    name: Deploy para Produção
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Configurar credenciais do Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configurar kubectl
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_CLUSTER_ZONE }}

      - name: Atualizar manifesto Kubernetes
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/app-name:${{ github.event.inputs.version }}|g" k8s/production/deployment.yaml

      - name: Deploy para Kubernetes
        run: |
          kubectl apply -f k8s/production/namespace.yaml
          kubectl apply -f k8s/production/configmap.yaml
          kubectl apply -f k8s/production/secret.yaml
          kubectl apply -f k8s/production/deployment.yaml
          kubectl apply -f k8s/production/service.yaml
          kubectl apply -f k8s/production/ingress.yaml

      - name: Verificar status do deployment
        run: |
          kubectl rollout status deployment/app-name -n production

      - name: Criar tag de release
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"

  monitor:
    name: Monitorar Deploy
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Verificar saúde da aplicação
        run: |
          # Aguardar a aplicação ficar disponível
          for i in {1..30}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://app.seudominio.com.br/actuator/health)
            if [ "$response" == "200" ]; then
              echo "Aplicação está saudável!"
              exit 0
            fi
            echo "Aguardando aplicação ficar disponível... ($i/30)"
            sleep 10
          done
          echo "Timeout ao aguardar aplicação ficar disponível"
          exit 1

      - name: Verificar métricas iniciais
        run: |
          # Aqui você pode adicionar comandos para verificar métricas iniciais
          # Por exemplo, usando Prometheus, Datadog, etc.
          echo "Verificando métricas iniciais..."

  rollback:
    name: Rollback (se necessário)
    runs-on: ubuntu-latest
    needs: [deploy-production, monitor]
    if: ${{ failure() && needs.deploy-production.result == 'success' }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Configurar credenciais do Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configurar kubectl
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_CLUSTER_ZONE }}

      - name: Obter versão anterior
        run: |
          PREVIOUS_VERSION=$(kubectl get deployment app-name -n production -o jsonpath='{.metadata.annotations.kubernetes\.io/previous-version}')
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Executar rollback
        run: |
          kubectl rollout undo deployment/app-name -n production
          echo "Rollback para versão ${{ env.PREVIOUS_VERSION }} iniciado"

      - name: Verificar status do rollback
        run: |
          kubectl rollout status deployment/app-name -n production

  notify:
    name: Notificar Deploy
    runs-on: ubuntu-latest
    needs: [deploy-production, monitor, rollback]
    if: always()
    steps:
      - name: Verificar status do deploy
        id: check-status
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" && "${{ needs.monitor.result }}" == "success" ]]; then
            echo "STATUS=success" >> $GITHUB_ENV
            echo "MESSAGE=✅ Deploy para produção da versão ${{ github.event.inputs.version }} concluído com sucesso!" >> $GITHUB_ENV
          elif [[ "${{ needs.rollback.result }}" == "success" ]]; then
            echo "STATUS=warning" >> $GITHUB_ENV
            echo "MESSAGE=⚠️ Falha no deploy para produção. Rollback executado com sucesso." >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
            echo "MESSAGE=❌ Falha crítica no deploy para produção. Verifique os logs urgentemente!" >> $GITHUB_ENV
          fi

      - name: Enviar notificação para Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: "deployments"
          SLACK_COLOR: ${{ env.STATUS == 'success' && 'good' || env.STATUS == 'warning' && 'warning' || 'danger' }}
          SLACK_TITLE: Deploy para Produção
          SLACK_MESSAGE: ${{ env.MESSAGE }}
          SLACK_FOOTER: GitHub Actions

      - name: Enviar notificação por e-mail
        if: ${{ env.STATUS != 'success' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[ALERTA] Status do Deploy para Produção"
          body: ${{ env.MESSAGE }}
          to: equipe@seudominio.com.br
          from: GitHub Actions <actions@seudominio.com.br> 