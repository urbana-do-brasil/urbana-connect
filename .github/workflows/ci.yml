name: Integração Contínua

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Adicionar permissões explícitas para o GITHUB_TOKEN
permissions:
  actions: read
  contents: read
  security-events: write # Necessário para upload de resultados do CodeQL

jobs:
  lint:
    name: Verificação de Código
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Verificar formatação com Checkstyle
        run: mvn checkstyle:check

      - name: Verificar qualidade de código com SpotBugs
        run: mvn spotbugs:check

  test:
    name: Testes Unitários
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Executar testes unitários
        run: mvn test

      - name: Gerar relatório de cobertura
        run: mvn jacoco:report

      - name: Publicar relatório de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/

  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          # Garantir que o histórico completo seja clonado para o CodeQL
          fetch-depth: 0

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Configurar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          # Não especificamos build-mode para usar o modo manual

      # Compilação manual para o CodeQL
      - name: Compilar com Maven para análise CodeQL
        run: mvn compile -DskipTests

      - name: Executar análise de segurança (SAST)
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"
          upload: true # Garantir que os resultados sejam enviados

      - name: Verificar dependências com OWASP
        run: mvn org.owasp:dependency-check-maven:check

  build:
    name: Build e Publicação
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build com Maven
        run: mvn clean package -DskipTests

      - name: Publicar artefato JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      # Configuração do Google Cloud
      - name: Configurar credenciais do Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configurar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Configurar Docker para usar o Artifact Registry
      - name: Configurar Docker para Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Definir variáveis para a imagem
      - name: Definir variáveis de imagem
        id: vars
        run: |
          echo "IMAGE_NAME=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/urbana-connect-containers/urbana-connect" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ALSO_LATEST=true" >> $GITHUB_ENV
          else
            echo "ALSO_LATEST=false" >> $GITHUB_ENV
          fi

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build e push da imagem Docker para o Artifact Registry
      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.ALSO_LATEST == 'true' && format('{0}:latest', env.IMAGE_NAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Scan de vulnerabilidades na imagem
      - name: Scan de vulnerabilidades na imagem
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Publicar resultados do scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif' 