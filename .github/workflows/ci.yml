name: Integração Contínua

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Verificação de Código
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Verificar formatação com Checkstyle
        run: mvn checkstyle:check

      - name: Verificar qualidade de código com SpotBugs
        run: mvn spotbugs:check

  test:
    name: Testes Unitários
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Executar testes unitários
        run: mvn test

      - name: Gerar relatório de cobertura
        run: mvn jacoco:report

      - name: Publicar relatório de cobertura
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: target/site/jacoco/

  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Configurar CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java

      - name: Executar análise de segurança (SAST)
        uses: github/codeql-action/analyze@v2

      - name: Verificar dependências com OWASP
        run: mvn org.owasp:dependency-check-maven:check

  build:
    name: Build e Publicação
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build com Maven
        run: mvn clean package -DskipTests

      - name: Publicar artefato JAR
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: target/*.jar

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v2

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extrair metadados para Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/app-name
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan de vulnerabilidades na imagem
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/app-name:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Publicar resultados do scan
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif' 